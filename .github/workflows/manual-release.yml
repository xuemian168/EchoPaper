name: Manual Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      create_tag:
        description: 'Create Git tag'
        required: true
        type: boolean
        default: true
      push_to_dockerhub:
        description: 'Push to Docker Hub'
        required: true
        type: boolean
        default: true

env:
  REGISTRY: docker.io
  IMAGE_NAME: ictrun/i18n_blog

jobs:
  validate:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.validate.outputs.version }}
      tag: ${{ steps.validate.outputs.tag }}
    steps:
      - name: Validate version format
        id: validate
        run: |
          VERSION="${{ github.event.inputs.version }}"
          
          # 确保版本以 v 开头
          if [[ ! $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ Invalid version format: $VERSION"
            echo "Please use semantic versioning format: v1.0.0"
            exit 1
          fi
          
          echo "version=${VERSION#v}" >> $GITHUB_OUTPUT
          echo "tag=$VERSION" >> $GITHUB_OUTPUT
          echo "✅ Version format valid: $VERSION"

  create-tag:
    needs: validate
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.create_tag == 'true' }}
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Update package.json version
        run: |
          cd frontend
          npm version ${{ needs.validate.outputs.version }} --no-git-tag-version
          cd ..
          git add frontend/package.json

      - name: Create tag and push
        run: |
          git commit -m "chore: bump version to ${{ needs.validate.outputs.tag }}" || echo "No changes to commit"
          git tag -a ${{ needs.validate.outputs.tag }} -m "Release ${{ needs.validate.outputs.tag }}"
          git push origin main
          git push origin ${{ needs.validate.outputs.tag }}

  build-and-release:
    needs: [validate, create-tag]
    runs-on: ubuntu-latest
    environment: REGISTRY
    timeout-minutes: 60
    if: always() && (needs.create-tag.result == 'success' || needs.create-tag.result == 'skipped')
    permissions:
      contents: write
      packages: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.validate.outputs.tag }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: ${{ github.event.inputs.push_to_dockerhub == 'true' }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ needs.validate.outputs.tag }}
            type=raw,value=latest
          labels: |
            org.opencontainers.image.title=I18N Blog
            org.opencontainers.image.description=A multilingual blog system with Go backend and Next.js frontend
            org.opencontainers.image.vendor=xuemian168
            org.opencontainers.image.licenses=MIT

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: ${{ github.event.inputs.push_to_dockerhub == 'true' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            VCS_REF=${{ github.sha }}
            NEXT_PUBLIC_APP_VERSION=${{ needs.validate.outputs.version }}
            NEXT_PUBLIC_BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            NEXT_PUBLIC_GIT_COMMIT=${{ github.sha }}
            NEXT_PUBLIC_GIT_BRANCH=main
            NEXT_PUBLIC_BUILD_NUMBER=${{ github.run_number }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          timeout: 3600

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.validate.outputs.tag }}
          release_name: Release ${{ needs.validate.outputs.tag }}
          body: |
            ## 🚀 Manual Release ${{ needs.validate.outputs.tag }}
            
            This release was created manually via GitHub Actions.
            
            ## 🐳 Docker Image
            
            ```bash
            docker pull ${{ env.IMAGE_NAME }}:${{ needs.validate.outputs.tag }}
            ```
            
            ## 🔗 Quick Deploy
            
            ```bash
            # One-click deployment
            curl -sSL https://raw.githubusercontent.com/xuemian168/i18n_blog/main/deploy-from-hub.sh | bash
            
            # Or with specific version
            docker run -d \
              --name i18n_blog \
              -p 80:80 \
              -v blog-data:/app/data \
              -e NEXT_PUBLIC_API_URL=https://your-domain.com/api \
              ${{ env.IMAGE_NAME }}:${{ needs.validate.outputs.tag }}
            ```
            
            ## 📋 Build Information
            
            - **Version**: ${{ needs.validate.outputs.version }}
            - **Build Date**: ${{ steps.build_info.outputs.BUILD_DATE }}
            - **Git Commit**: ${{ steps.build_info.outputs.GIT_COMMIT }}
            - **Workflow Run**: ${{ github.run_number }}
          draft: false
          prerelease: false

  summary:
    needs: [validate, create-tag, build-and-release]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Print summary
        run: |
          echo "## 📋 Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ needs.validate.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Create Tag**: ${{ github.event.inputs.create_tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Push to Docker Hub**: ${{ github.event.inputs.push_to_dockerhub }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.build-and-release.result }}" == "success" ]; then
            echo "✅ Release completed successfully!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🐳 **Docker Image**: \`${{ env.IMAGE_NAME }}:${{ needs.validate.outputs.tag }}\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "📦 **Docker Hub**: https://hub.docker.com/r/ictrun/i18n_blog" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Release failed!" >> $GITHUB_STEP_SUMMARY
          fi