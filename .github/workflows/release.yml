name: Release to Docker Hub

on:
  push:
    tags:
      - 'v*.*.*'  # Ëß¶ÂèëÊù°‰ª∂ÔºöÊé®ÈÄÅËØ≠‰πâÂåñÁâàÊú¨Ê†áÁ≠æ (Â¶Ç v1.0.0)

env:
  REGISTRY: docker.io
  IMAGE_NAME: ictrun/kuno

jobs:
  release:
    runs-on: ubuntu-latest
    environment: REGISTRY
    timeout-minutes: 60
    permissions:
      contents: write
      packages: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract version from tag
        id: extract_version
        run: |
          # ‰ªé tag ‰∏≠ÊèêÂèñÁâàÊú¨Âè∑ (ÂéªÊéâ v ÂâçÁºÄ)
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"
          echo "Tag: ${GITHUB_REF#refs/tags/}"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest
          labels: |
            org.opencontainers.image.title=kuno
            org.opencontainers.image.description=A multilingual blog system with Go backend and Next.js frontend
            org.opencontainers.image.vendor=xuemian168
            org.opencontainers.image.licenses=MIT

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            VCS_REF=${{ github.sha }}
            NEXT_PUBLIC_APP_VERSION=${{ steps.extract_version.outputs.version }}
            NEXT_PUBLIC_BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            NEXT_PUBLIC_GIT_COMMIT=${{ github.sha }}
            NEXT_PUBLIC_GIT_BRANCH=main
            NEXT_PUBLIC_BUILD_NUMBER=${{ github.run_number }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          timeout: 3600

      - name: Generate release notes
        id: release_notes
        run: |
          # Ëé∑Âèñ‰∏ä‰∏Ä‰∏™Ê†áÁ≠æ
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 ${{ steps.extract_version.outputs.tag }}^ 2>/dev/null || echo "")
          
          # ÁîüÊàêÊõ¥Êñ∞Êó•Âøó
          if [ -n "$PREVIOUS_TAG" ]; then
            echo "## üîÑ Changes since $PREVIOUS_TAG" >> release_notes.md
            echo "" >> release_notes.md
            git log --pretty=format:"- %s" $PREVIOUS_TAG..${{ steps.extract_version.outputs.tag }} >> release_notes.md
            echo "" >> release_notes.md
          fi
          
          # Ê∑ªÂä†ÈÉ®ÁΩ≤‰ø°ÊÅØ
          cat << EOF >> release_notes.md
          
          ## üê≥ Docker Image
          
          \`\`\`bash
          docker pull ${{ env.IMAGE_NAME }}:${{ steps.extract_version.outputs.tag }}
          \`\`\`
          
          ## üöÄ Quick Deploy
          
          ### One-click deployment:
          \`\`\`bash
          curl -sSL https://raw.githubusercontent.com/xuemian168/kuno/main/deploy-from-hub.sh | bash
          \`\`\`
          
          ### Docker Compose:
          \`\`\`yaml
          version: '3.8'
          services:
            i18n-blog:
              image: ${{ env.IMAGE_NAME }}:${{ steps.extract_version.outputs.tag }}
              ports:
                - "80:80"
              volumes:
                - blog-data:/app/data
              environment:
                - NEXT_PUBLIC_API_URL=https://your-domain.com/api
          
          volumes:
            blog-data:
          \`\`\`
          
          ### Manual Docker run:
          \`\`\`bash
          docker run -d \\
            --name kuno \\
            -p 80:80 \\
            -v blog-data:/app/data \\
            -e NEXT_PUBLIC_API_URL=https://your-domain.com/api \\
            ${{ env.IMAGE_NAME }}:${{ steps.extract_version.outputs.tag }}
          \`\`\`
          
          ## üìã Version Information
          
          - **Version**: ${{ steps.extract_version.outputs.version }}
          - **Build Date**: ${{ steps.build_info.outputs.BUILD_DATE }}
          - **Git Commit**: ${{ steps.build_info.outputs.GIT_COMMIT }}
          - **Docker Hub**: https://hub.docker.com/r/ictrun/kuno
          
          ## üîó Links
          
          - [Docker Hub Repository](https://hub.docker.com/r/ictrun/kuno)
          - [Documentation](https://github.com/xuemian168/kuno/blob/main/README.md)
          - [Deployment Guide](https://github.com/xuemian168/kuno/blob/main/DOCKER_DEPLOYMENT.md)
          EOF

      - name: Check if release exists
        id: check_release
        run: |
          if gh release view ${{ steps.extract_version.outputs.tag }} >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Release ${{ steps.extract_version.outputs.tag }} already exists"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Release ${{ steps.extract_version.outputs.tag }} does not exist"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release
        if: steps.check_release.outputs.exists == 'false'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.extract_version.outputs.tag }}
          release_name: Release ${{ steps.extract_version.outputs.tag }}
          body_path: release_notes.md
          draft: false
          prerelease: false

      - name: Update existing release
        if: steps.check_release.outputs.exists == 'true'
        run: |
          echo "Updating existing release ${{ steps.extract_version.outputs.tag }}"
          gh release edit ${{ steps.extract_version.outputs.tag }} \
            --notes-file release_notes.md \
            --title "Release ${{ steps.extract_version.outputs.tag }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update Docker Hub description
        uses: peter-evans/dockerhub-description@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
          repository: ${{ env.IMAGE_NAME }}
          readme-filepath: ./DOCKER_HUB_DESCRIPTION.md

  notify:
    needs: release
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notification
        run: |
          if [ "${{ needs.release.result }}" == "success" ]; then
            echo "‚úÖ Release ${{ github.ref_name }} completed successfully!"
            echo "üê≥ Docker image: ${{ env.IMAGE_NAME }}:${{ github.ref_name }}"
            echo "üì¶ Available at: https://hub.docker.com/r/ictrun/kuno"
            echo "üìã GitHub Release: https://github.com/xuemian168/kuno/releases/tag/${{ github.ref_name }}"
          else
            echo "‚ùå Release ${{ github.ref_name }} failed!"
          fi